#!/bin/bash

# Script pour v√©rifier l'existence des registries et √©viter d'en cr√©er par hasard

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}üîç V√©rification des registries existants${NC}"

# Obtenir le projet actuel
PROJECT_ID=$(gcloud config get-value project)
if [ -z "$PROJECT_ID" ]; then
    echo -e "${RED}‚ùå Aucun projet Google Cloud configur√©.${NC}"
    echo "Commande: gcloud config set project YOUR_PROJECT_ID"
    exit 1
fi

echo -e "${YELLOW}üìã Projet: ${PROJECT_ID}${NC}"

# V√©rifier Google Container Registry (GCR)
echo -e "${YELLOW}üîç V√©rification de Google Container Registry (GCR)...${NC}"
GCR_BUCKETS=$(gcloud storage buckets list --filter="name:artifacts.${PROJECT_ID}.appspot.com" --format="value(name)" 2>/dev/null || echo "")

if [ -n "$GCR_BUCKETS" ]; then
    echo -e "${GREEN}‚úÖ GCR bucket trouv√©: ${GCR_BUCKETS}${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun bucket GCR trouv√©.${NC}"
    echo "Le bucket GCR sera cr√©√© automatiquement lors du premier push d'image."
fi

# V√©rifier Artifact Registry
echo -e "${YELLOW}üîç V√©rification d'Artifact Registry...${NC}"
ARTIFACT_REGISTRIES=$(gcloud artifacts repositories list --format="value(name)" --project=$PROJECT_ID 2>/dev/null || echo "")

if [ -n "$ARTIFACT_REGISTRIES" ]; then
    echo -e "${GREEN}‚úÖ Artifact Registries trouv√©s:${NC}"
    echo "$ARTIFACT_REGISTRIES"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun Artifact Registry trouv√©.${NC}"
    echo "Vous pouvez en cr√©er un si n√©cessaire avec:"
    echo "gcloud artifacts repositories create REPO_NAME --repository-format=docker --location=LOCATION"
fi

# V√©rifier les permissions du service account
echo -e "${YELLOW}üîç V√©rification des permissions du service account...${NC}"

# Obtenir le service account GitHub Actions
SA_EMAIL=$(gcloud iam service-accounts list --filter="displayName:GitHub Terraform" --format="value(email)" --project=$PROJECT_ID)

if [ -z "$SA_EMAIL" ]; then
    echo -e "${RED}‚ùå Service account GitHub Actions non trouv√©.${NC}"
    echo "Assurez-vous que le module bootstrap-wif/ a √©t√© d√©ploy√©."
    exit 1
fi

echo -e "${GREEN}‚úÖ Service account trouv√©: ${SA_EMAIL}${NC}"

# V√©rifier les permissions IAM
echo -e "${YELLOW}üîç V√©rification des permissions IAM...${NC}"

# V√©rifier les permissions sur le projet
IAM_POLICY=$(gcloud projects get-iam-policy $PROJECT_ID --format="json" 2>/dev/null || echo "{}")

# V√©rifier les permissions sp√©cifiques
STORAGE_ADMIN=$(echo "$IAM_POLICY" | jq -r ".bindings[] | select(.role == \"roles/storage.admin\") | .members[] | select(. == \"serviceAccount:${SA_EMAIL}\")" 2>/dev/null || echo "")
CONTAINER_ADMIN=$(echo "$IAM_POLICY" | jq -r ".bindings[] | select(.role == \"roles/container.admin\") | .members[] | select(. == \"serviceAccount:${SA_EMAIL}\")" 2>/dev/null || echo "")
ARTIFACT_ADMIN=$(echo "$IAM_POLICY" | jq -r ".bindings[] | select(.role == \"roles/artifactregistry.admin\") | .members[] | select(. == \"serviceAccount:${SA_EMAIL}\")" 2>/dev/null || echo "")

if [ -n "$STORAGE_ADMIN" ]; then
    echo -e "${GREEN}‚úÖ Permission storage.admin accord√©e${NC}"
else
    echo -e "${RED}‚ùå Permission storage.admin manquante${NC}"
fi

if [ -n "$CONTAINER_ADMIN" ]; then
    echo -e "${GREEN}‚úÖ Permission container.admin accord√©e${NC}"
else
    echo -e "${RED}‚ùå Permission container.admin manquante${NC}"
fi

if [ -n "$ARTIFACT_ADMIN" ]; then
    echo -e "${GREEN}‚úÖ Permission artifactregistry.admin accord√©e${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Permission artifactregistry.admin manquante${NC}"
    echo "Cette permission sera ajout√©e lors du prochain d√©ploiement Terraform."
fi

echo ""
echo -e "${BLUE}üìã R√©sum√©:${NC}"
echo "  - Projet: $PROJECT_ID"
echo "  - Service Account: $SA_EMAIL"
echo "  - GCR Bucket: ${GCR_BUCKETS:-'Sera cr√©√© automatiquement'}"
echo "  - Artifact Registries: ${ARTIFACT_REGISTRIES:-'Aucun'}"
echo ""

if [ -n "$STORAGE_ADMIN" ] && [ -n "$CONTAINER_ADMIN" ]; then
    echo -e "${GREEN}‚úÖ Les permissions de base sont configur√©es.${NC}"
    echo -e "${YELLOW}üí° Vous pouvez maintenant tester le push d'images.${NC}"
else
    echo -e "${RED}‚ùå Des permissions manquent.${NC}"
    echo -e "${YELLOW}üí° Red√©ployez le module bootstrap-wif/ avec: terraform apply${NC}"
fi
