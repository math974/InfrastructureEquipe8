name: Deploy to Development

on:
  workflow_run:
    workflows: ["Terraform (Develop)"]
    types: [completed]
    branches-ignore: [ main ]
  push:
    branches-ignore: [ main ]
  pull_request:
    branches-ignore: [ main ]

permissions:
  contents: read
  id-token: write
  packages: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY: ${{ vars.ARTIFACT_REGISTRY_URL || 'gcr.io' }}
  IMAGE_NAME: tasks-app
  INSTANCE_NAME: tasks-mysql

jobs:
  test:
    runs-on: ubuntu-latest
    environment:
      name: Develop
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd app
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        cd app
        python -m pytest tests/ || echo "No tests found, continuing..."

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: |
      github.ref != 'refs/heads/main' && (
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
        github.event_name == 'push'
      )
    environment:
      name: Develop

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Auth to Google Cloud (WIF)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Get Artifact Registry URL
      run: |
        # Obtenir l'URL d'Artifact Registry depuis Terraform
        echo "🔍 Recherche d'Artifact Registry dans le projet $PROJECT_ID..."
        ARTIFACT_REGISTRY_URL=$(gcloud artifacts repositories list --format="value(name)" --filter="format=DOCKER" --project=$PROJECT_ID | head -1)
        
        if [ -n "$ARTIFACT_REGISTRY_URL" ]; then
          echo "ARTIFACT_REGISTRY_URL=$ARTIFACT_REGISTRY_URL" >> $GITHUB_ENV
          echo "REGISTRY=$ARTIFACT_REGISTRY_URL" >> $GITHUB_ENV
          echo "✅ Artifact Registry trouvé: $ARTIFACT_REGISTRY_URL"
        else
          echo "❌ Aucun Artifact Registry trouvé !"
          echo "Vérifiez que Terraform a été déployé avec succès."
          exit 1
        fi

    - name: Configure Docker for Artifact Registry
      run: |
        echo "🔧 Configuration de Docker pour Artifact Registry..."
        gcloud auth configure-docker $REGISTRY --quiet
        echo "✅ Docker configuré pour $REGISTRY"

    - name: Build and push to Artifact Registry
      run: |
        cd app
        echo "🐳 Construction de l'image Docker..."
        echo "Registry: $REGISTRY"
        echo "Image: $IMAGE_NAME"
        echo "Tag: $GITHUB_SHA"
        
        # Construction de l'image avec le bon registry
        docker build -t $REGISTRY/$IMAGE_NAME:$GITHUB_SHA .
        docker tag $REGISTRY/$IMAGE_NAME:$GITHUB_SHA $REGISTRY/$IMAGE_NAME:dev-latest
        
        echo "📤 Push vers Artifact Registry..."
        docker push $REGISTRY/$IMAGE_NAME:$GITHUB_SHA
        docker push $REGISTRY/$IMAGE_NAME:dev-latest
        echo "✅ Images poussées avec succès vers $REGISTRY"

    - name: Build and push to GitHub Container Registry
      run: |
        cd app
        docker build -t ghcr.io/${{ github.repository }}/$IMAGE_NAME:$GITHUB_SHA .
        docker tag ghcr.io/${{ github.repository }}/$IMAGE_NAME:$GITHUB_SHA ghcr.io/${{ github.repository }}/$IMAGE_NAME:dev-latest
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push ghcr.io/${{ github.repository }}/$IMAGE_NAME:$GITHUB_SHA
        docker push ghcr.io/${{ github.repository }}/$IMAGE_NAME:dev-latest

  #deploy-dev:
  #  needs: build-and-push
  #  runs-on: ubuntu-latest
  #  if: github.ref != 'refs/heads/main'
  #  environment: 
  #    name: development
  #    url: https://tasks-app-dev.example.com
  #  
  #  steps:
  #  - name: Checkout
  #    uses: actions/checkout@v4
#
  #  - name: Auth to Google Cloud (WIF)
  #    uses: google-github-actions/auth@v2
  #    with:
  #      workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  #      service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
#
  #  - name: Set up Cloud SDK
  #    uses: google-github-actions/setup-gcloud@v1
#
  #  - name: Configure kubectl
  #    run: |
  #      gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID
#
  #  - name: Install Helm
  #    uses: azure/setup-helm@v3
  #    with:
  #      version: '3.12.0'
#
  #  - name: Get database password from Secret Manager
  #    run: |
  #      DB_PASSWORD=$(gcloud secrets versions access latest --secret="${INSTANCE_NAME}-app-db-password" --project=$PROJECT_ID)
  #      echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
#
  #  - name: Deploy to GKE with Helm
  #    run: |
  #      helm upgrade --install tasks-app-dev ./helm/tasks-app \
  #        --namespace tasks-dev \
  #        --create-namespace \
  #        --values ./helm/tasks-app/values-dev.yaml \
  #        --set image.repository=$REGISTRY/$PROJECT_ID/$IMAGE_NAME \
  #        --set image.tag=dev-latest \
  #        --set secrets.dbPassword=$DB_PASSWORD \
  #        --wait --timeout=5m
#
  #  - name: Verify deployment
  #    run: |
  #      kubectl get pods -n tasks-dev
  #      kubectl get services -n tasks-dev
  #      kubectl get ingress -n tasks-dev
