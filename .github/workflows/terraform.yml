name: Terraform (Develop)

on:
  pull_request:
    branches-ignore: [main]
    paths-ignore:
      - 'bootstrap-wif/**'
  push:
    branches-ignore: [main]
    paths-ignore:
      - 'bootstrap-wif/**'

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  fmt_validate:
    name: Format & Validate
    runs-on: ubuntu-latest
    environment:
      name: Develop
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
          terraform_wrapper: true

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ./.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init (backend dev)
        run: |
          terraform init \
            -backend-config=backends/dev.config

      - name: Terraform Format Check
        run: |
          files=$(git ls-files '*.tf' | grep -v '^bootstrap-wif/')
          if [ -n "$files" ]; then
            terraform fmt -check $files
          else
            echo "No Terraform files to check."
          fi

      - name: Terraform Validate
        run: terraform validate

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: fmt_validate
    if: github.event_name == 'pull_request'
    environment:
      name: Develop
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
          terraform_wrapper: true

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ./.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init (backend dev)
        run: |
          terraform init \
            -backend-config=backends/dev.config

      - name: Terraform Plan (env dev)
        id: plan
        run: |
          terraform plan \
            -var-file=envs/dev.tfvars \
            -input=false

  apply:
    name: Apply
    runs-on: ubuntu-latest
    needs: fmt_validate
    if: github.event_name == 'push'
    environment:
      name: Develop
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
          terraform_wrapper: true

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ./.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init (backend dev)
        run: |
          terraform init \
            -backend-config=backends/dev.config

      - name: Terraform Apply (env dev)
        run: |
          terraform apply \
            -auto-approve \
            -var-file=envs/dev.tfvars \
            -input=false

