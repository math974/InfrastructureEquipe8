This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    terraform.yml
backends/
  dev.config.example
.gitignore
basics_refresher.tf
dev.tfvars.example
main.tf
variables.tf
vpc_subnet.tf
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/terraform.yml">
name: Terraform CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest

    env:
      GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp_key.json

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Write GCP credentials
        run: echo "${{ secrets.GCP_CREDENTIALS }}" > $GOOGLE_APPLICATION_CREDENTIALS

      - name: Terraform Init
        run: terraform init -backend-config=backends/dev.config

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file=dev.tfvars

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=dev.tfvars
</file>

<file path="backends/dev.config.example">
bucket = "your-team-tfstates-bucket"
prefix = "terraform/state"
</file>

<file path=".gitignore">
# Répertoires locaux Terraform
.terraform/
.terraform.lock.hcl

# États Terraform (contient infos sensibles)
terraform.tfstate
terraform.tfstate.*
*.tfstate.backup

# Fichiers de config backend (contient noms de buckets, chemins)
backends/*.config

# Fichiers de variables sensibles (ex: credentials, id de projet, ranges IP spécifiques)
*.tfvars

# Fichiers temporaires/notes
*.log
*.tmp
*.swp
*.bak
*.DS_Store
</file>

<file path="dev.tfvars.example">
project_id   = "YOUR_PROJECT_ID"
region       = "europe-west9"
network_name = "team-network"
ip_range     = "10.0.0.0/24"
</file>

<file path="main.tf">
terraform {
  backend "gcs" {}
}
</file>

<file path="variables.tf">
variable "project_id" {
  type        = string
  description = "Cloud project ID"
}

variable "region" {
  type        = string
  description = "Region for resources"
}

variable "network_name" {
  type        = string
  description = "Name of the VPC network"
}

variable "ip_range" {
  type        = string
  description = "IP range for the VPC network"
}
</file>

<file path="vpc_subnet.tf">
resource "google_compute_network" "main" {
  name                    = var.network_name
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "main" {
  name          = "${var.network_name}-subnet"
  ip_cidr_range = var.ip_range
  region        = var.region
  network       = google_compute_network.main.id
}

output "network_id" {
  value       = google_compute_network.main.id
  description = "The ID of the created VPC network"
}
</file>

<file path="basics_refresher.tf">
provider "google" {
  project = var.project_id
  region  = var.region
}
</file>

</files>
